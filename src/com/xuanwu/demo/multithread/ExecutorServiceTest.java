package com.xuanwu.demo.multithread;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * 验证ExecutorService生成多线程
 * 		Executors类，提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口
 * 
 * 使用ExecutorService、Callable、Future实现有返回结果的线程
	ExecutorService、Callable、Future三个接口实际上都是属于Executor框架。返回结果的线程是在JDK1.5中引入的新特征，有了这种特征就不需要再为了得到返回值而大费周折了。而且自己实现了也可能漏洞百出。
	可返回值的任务必须实现Callable接口。类似的，无返回值的任务必须实现Runnable接口。
	执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了。
	注意：get方法是阻塞的，即：线程无返回结果，get方法会一直等待。
	再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。
 * @author Jane1222
 * @Date 2017-09-29
 *
 */
public class ExecutorServiceTest {
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static void main(String[] args) throws InterruptedException, ExecutionException {
		Date date1 = new Date();
		int taskSize=5;
		//创建一个线程池
		ExecutorService pool = Executors.newFixedThreadPool(taskSize);
		//创建多个有返回值的任务
		List<Future> list = new ArrayList<Future>();
		for(int i=0;i<taskSize;i++){
			Callable c = new MyCallable(i+"");
			//执行任务并获取Future对象
			Future f = pool.submit(c);
			list.add(f);
		}
		//关闭线程池
		pool.shutdown();
		//获取并发任务的运行结果
		for(Future f:list){
			//从Future对象上获取任务的返回值，输出到控制台
			System.out.println(f.get().toString());
		}
		Date date2 = new Date();
		System.out.println("===程序运行结束===，运行时间"+(date2.getTime()-date1.getTime())+"毫秒");
	}
}
/**
 * 代码说明：
 * 上述代码中Executors类，提供了一系列工厂方法用于创建线程池，返回的线程池都实现了ExecutorService接口。
	public static ExecutorService newFixedThreadPool(int nThreads) 
	创建固定数目线程的线程池。
	public static ExecutorService newCachedThreadPool() 
	创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。
	public static ExecutorService newSingleThreadExecutor() 
	创建一个单线程化的Executor。
	public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) 
	创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。

	ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成
 */


/**
 * 
 * @Description 实现Callable接口通过FutureTask包装器来创建Thread线程
 * 
 */
class MyCallable implements Callable<Object> {  
	private String taskName;  
	MyCallable(String taskName) {  
	   this.taskName = taskName;  
	}  
  
	public Object call() throws Exception {  
	   System.out.println(">>>" + taskName + "任务启动");  
	   Date dateTmp1 = new Date();  
	   Thread.sleep(1000);  
	   Date dateTmp2 = new Date();  
	   long time = dateTmp2.getTime() - dateTmp1.getTime();  
	   System.out.println(">>>" + taskName + "任务终止");  
	   return taskName + "任务返回运行结果,当前任务时间【" + time + "毫秒】";  
	}  
}  


 
